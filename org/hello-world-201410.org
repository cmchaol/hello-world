
* tasks

** 15 minutes tasks

*** ssh clone git inside emacs through babel

| git clone    |
|--------------|
| clone https  |
| ssh          |
| emacs eshell |
| org babel    |
|              |

- clone

git clone https://github.com/cmchaol/hello-world.git 


- ssh

git clone git@github.com:cmchaol/hello-world.git  


- emacs eshell mode: get inside emacs eshell by M-x eshell

git clone git@github.com:cmchaol/hello-world.git  


- orgmode babel: inside org file and execute by C-c C-c


#+BEGIN_SRC sh

cd ~/
pwd

#+END_SRC

#+RESULTS:
: /home/c5766




** DONE todo test

| 3 state   |                        |
|-----------+------------------------|
| none      |                        |
| TODO      |                        |
| DONE      |                        |
|-----------+------------------------|
| C-c C-t   | cursor inside the tree |
| org-todo  |                        |
|           |                        |
| S-<right> | cursor on the headline |
| S-<left>  |                        |

http://orgmode.org/manual/TODO-basics.html#TODO-basics



** DONE emacs spell check

M-x flyspell-mode
    Enable Flyspell mode, which highlights all misspelled words. 

https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html


** DONE 8.4 Clocking work time
   CLOCK: [2014-10-12 Sun 13:44]--[2014-10-12 Sun 13:46] =>  0:02
   CLOCK: [2014-10-12 Sun 13:40]--[2014-10-12 Sun 13:41] =>  0:01

| the clock    |               |
|--------------+---------------|
| start        | stop          |
| clock in     | clock out     |
|--------------+---------------|
| C-c C-x C-i  | C-c C-x C-o   |
| org-clock-in | org-clock-out |


http://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time




* projects
  


** GTD orgmode

*** important reference

How I use Emacs and Org-mode to implement GTD 

http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html




** literate programming

*** babel

**** Babel: Introduction

http://orgmode.org/worg/org-contrib/babel/intro.html

#+BEGIN_SRC 

#+END_SRC

#+begin_src sh
  echo "This file takes up `du -h org-babel.org |sed 's/\([0-9k]*\)[ ]*org-babel.org/\1/'`"
#+end_src

#+RESULTS:
: This file takes up


#+BEGIN_SRC sh

pwd

#+END_SRC

#+RESULTS:
: /home/c5766/c5766tmpfs/hello-world/org


**** important reference

A Multi-Language Computing Environment for Literate Programming and Reproducible Research

http://www.jstatsoft.org/v46/i03



Babel: Introduction

http://orgmode.org/worg/org-contrib/babel/intro.html


literate

https://www.ahdictionary.com/word/search.html?q=literate

http://dictionary.cambridge.org/dictionary/british/literate

Tools

http://en.wikipedia.org/wiki/Literate_programming



** my git experience

*** ssh clone github inside emacs

| the command                                              |   | step |                                  |
|----------------------------------------------------------+---+------+----------------------------------|
|                                                          | # |    1 | get inside emacs                 |
|                                                          | # |    2 | enter eshell M-x eshell          |
|                                                          | # |    3 | move to the right directory      |
| git clone git@github.com:cmchaol/hello-world.git         | # |    4 | ssh clone this repository        |
| cd hello-world                                           | # |    5 | move inside the local repository |
| git config user.email "cmchaol@users.noreply.github.com" | # |    6 | configure user.email             |
| git config user.name "cmchaol"                           | # |    7 | configure user.name              |


*** ssh clone github inside emacs


| # get inside emacs                                       |
|                                                          |
| # create an eshell with the command 'M-x eshell'         |
|                                                          |
| # get inside the eshell and move to the right directory  |
|                                                          |
|                                                          |
| # ssh clone this repository                              |
| git clone git@github.com:cmchaol/hello-world.git         |
|                                                          |
| # move inside the local repository                       |
| cd hello-world                                           |
|                                                          |
| # configure user.email                                   |
| git config user.email "cmchaol@users.noreply.github.com" |
|                                                          |
| # configure user.name                                    |
| git config user.name "cmchaol"                           |







*** ssh clone github inside emacs in export-example
#+BEGIN_EXAMPLE

| the command                                              |   | step |                                  |
|----------------------------------------------------------+---+------+----------------------------------|
|                                                          | # |    1 | get inside emacs                 |
|                                                          | # |    2 | enter eshell M-x eshell          |
|                                                          | # |    3 | move to the right directory      |
| git clone git@github.com:cmchaol/hello-world.git         | # |    4 | ssh clone this repository        |
| cd hello-world                                           | # |    5 | move inside the local repository |
| git config user.email "cmchaol@users.noreply.github.com" | # |    6 | configure user.email             |
| git config user.name "cmchaol"                           | # |    7 | configure user.name              |

#+END_EXAMPLE

*** ssh github

**** facts

http://git-scm.com/book/en/Git-on-the-Server-The-Protocols

Probably the most common transport protocol for Git is SSH. 

SSH is also the only network-based protocol that you can easily read from and write to. 


**** clone ssh github

http://git-scm.com/book/en/Git-on-the-Server-The-Protocols


To clone a Git repository over SSH, you can specify ssh:// URL like this:

$ git clone ssh://user@server/project.git

Or you can use the shorter scp-like syntax for SSH protocol:

$ git clone user@server:project.git


git clone ssh://user@server/project.git

git clone user@server:project.git

#+BEGIN_QUOTE

http://git-scm.com/book/en/Git-on-the-Server-The-Protocols


Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE



for hello-world

| git clone ssh://cmchaol@github.com/hello-world.git     | failed  |
| git clone ssh://git@github.com/cmchaol/hello-world.git | succeed |
| git clone git@github.com:cmchaol/hello-world.git       | succeed |

git clone ssh://cmchaol@github.com/hello-world.git

Cloning into 'hello-world'...

Permission denied (publickey).

fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.



git clone ssh://git@github.com/cmchaol/hello-world.git

git clone git@github.com:cmchaol/hello-world.git


#+BEGIN_EXAMPLE

| git clone ssh:// cmchaol @github.com          /hello-world.git | failed  |
| git clone ssh:// git     @github.com /cmchaol /hello-world.git | succeed |
|                                                                |         |
| git clone        git     @github.com :cmchaol /hello-world.git | succeed |

#+END_EXAMPLE


|   |              <r> |
| 1 |        git clone |
| 2 |           ssh:// |
|   |                  |
|   |                  |
| 3 |          cmchaol |
| 4 |         :cmchaol |
| 5 |         /cmchaol |
|   |                  |
| 6 |              git |
| 7 |      @github.com |
| 8 | /hello-world.git |

| git clone | ssh:// | cmchaol | @github.com |          | /hello-world.git | # | failed  |
| git clone | ssh:// | git     | @github.com | /cmchaol | /hello-world.git | # | succeed |
| git clone |        | git     | @github.com | :cmchaol | /hello-world.git | # | succeed |


**** ssh keys

location

~/.ssh

files

either id_rsa.pub or id_dsa.pub

either 

id_rsa.pub
id_dsa.pub



**** github ssh clone

git clone git@github.com:cmchaol/hello-world.git

**** temp


https://help.github.com/articles/generating-ssh-keys/

ls -la ~/.ssh

ssh-keygen -t rsa -C "cmchaol@users.noreply.github.com"

upload to github 
failed in firefox, gentoo, the click of the buttom "Add SSH key", which is the following link, has no function.

https://github.com/settings/ssh#

do it in windows.

test it. 

ssh -T git@github.com

Changing a remote's URL

https://help.github.com/articles/changing-a-remote-s-url/

git remote -v

git remote -v
origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY.git (push)


git remote -v
origin  https://github.com/cmchaol/hello-world.git (fetch)
origin  https://github.com/cmchaol/hello-world.git (push)

git remote set-url origin git@github.com:USERNAME/REPOSITORY2.git

git remote set-url origin git@github.com:cmchaol/hello-world.git

git remote -v




*** git rm


|                           | the command               |
|---------------------------+---------------------------|
| git rm the-specific-file  | git rm the-specific-file  |



*** repository download, setup, edit, upload, by git

**** summary

| step | the repsitory | the git command |
|------+---------------+-----------------|
|    1 | download      | git clone       |
|      |               |                 |
|    2 | setup         | git config      |
|      |               |                 |
|    3 | edit          | git add         |
|      |               | git commit      |
|      |               |                 |
|    4 | upload        | git push        |


**** download THIS repository

#+BEGIN_EXAMPLE

git clone https://github.com/cmchaol/hello-world.git

#+END_EXAMPLE

| step |                              | the command                                          |
|------+------------------------------+------------------------------------------------------|
|    1 | open a terminal              |                                                      |
|      |                              |                                                      |
|    2 | point inside the terminal    |                                                      |
|      |                              |                                                      |
|    3 | move to the desire directory |                                                      |
|      |                              |                                                      |
|    4 | download the respostory      | git clone https://github.com/cmchaol/hello-world.git |
|      |                              |                                                      |
| <c>  |  <r>                         |                                                      |


**** setup the local respository

#+BEGIN_EXAMPLE

cd hello-world    

git config user.email "cmchaol@users.noreply.github.com"

git config user.name "cmchaol" 

git config credential.helper 'cache --timeout=3600'

git config push.default simple 

#+END_EXAMPLE

| the command                                              | the comment                        | step |
|                                                          |                                    |      |
|                                                          |                                    |      |
| cd hello-world                                           | # move inside the local repository |    1 |
|                                                          |                                    |      |
| git config push.default simple                           | # push.default simple              |      |
|                                                          |                                    |      |
| git config credential.helper 'cache --timeout=3600'      | # caching-your-github-password     |      |
|                                                          |                                    |      |
| git config user.email "cmchaol@users.noreply.github.com" | # setup user.email                 |      |
|                                                          |                                    |      |
| git config user.name "cmchaol"                           | # setup user.name                  |      |
|                                                          |                                    |      |
|                                                          |                                    |      |


| the command                                              | the comment                        |
|                                                          |                                    |
|                                                          |                                    |
| cd hello-world                                           | # move inside the local repository |
|                                                          |                                    |
| git config push.default simple                           | # push.default simple              |
|                                                          |                                    |
| git config credential.helper 'cache --timeout=3600'      | # caching-your-github-password     |
|                                                          |                                    |
| git config user.email "cmchaol@users.noreply.github.com" | # setup user.email                 |
|                                                          |                                    |
| git config user.name "cmchaol"                           | # setup user.name                  |
|                                                          |                                    |
|                                                          |                                    |



cd hello-world    

git config user.email "cmchaol@users.noreply.github.com"

git config user.name "cmchaol" 

git config credential.helper 'cache --timeout=3600'

git config push.default simple 




**** edit the local repository, git add, git commit

| step |                                  | the command               |
|------+----------------------------------+---------------------------|
|    1 | edit the-specific-file           |                           |
|      |                                  |                           |
|    2 | git add the-specific-file        | git add the-specific-file |
|      |                                  |                           |
|    3 | commit the snapshot              | git commit -m "<message>" |


git add

https://www.atlassian.com/git/tutorials/saving-changes/git-add


git commit 

https://www.atlassian.com/git/tutorials/saving-changes/git-commit



**** upload the local snapshot to the remote github repository

| step |                                                     |
|------+-----------------------------------------------------|
|    1 | inside the local repository                         |
|      |                                                     |
|    2 | setup the git config                                |
|      |                                                     |
|      | user.mail                                           |
|      | git config user.email "you@example.com"             |
|      |                                                     |
|      | user.name                                           |
|      | git config user.name "cmchaol"                      |
|      |                                                     |
|      | push.default                                        |
|      | git config push.default simple                      |
|      |                                                     |
|      | caching password                                    |
|      | git config credential.helper 'cache --timeout=3600' |
|      |                                                     |
|      |                                                     |
|    3 | git push                                            |
|      |                                                     |


step 2

#+BEGIN_EXAMPLE

git config user.email "you@example.com" 

git config user.name "cmchaol"          

git config push.default simple

git config          credential.helper 'cache --timeout=3600'

#+END_EXAMPLE


step 3

git push 

https://www.atlassian.com/git/tutorials/syncing/git-push


**** a typical script

| A practicle cycle |
|-------------------|
| git clone         |
| edit              |
| git add           |
| git commit        |
| git push          |

#+BEGIN_EXAMPLE

git add hello-world-201410.org

git commit -m "<another modification of hello-world-201410.org>"

git push

#+END_EXAMPLE



*** Caching your GitHub password in Git

By default, Git will cache your password for 15 minutes.

https://help.github.com/articles/caching-your-github-password-in-git

#+BEGIN_EXAMPLE

git config          credential.helper  cache

git config --global credential.helper  cache

git config --global credential.helper 'cache --timeout=3600'

git config          credential.helper 'cache --timeout=3600'

#+END_EXAMPLE




** org mode


*** markdown



*** column width in org and github 1

| the command                                              | the comment                        | step |
|                                                          |                                    |      |
|                                                          |                                    |      |
| cd hello-world                                           | # move inside the local repository |    1 |
|                                                          |                                    |      |
| git config push.default simple                           | # push.default simple              |      |
|                                                          |                                    |      |
| git config credential.helper 'cache --timeout=3600'      | # caching-your-github-password     |      |
|                                                          |                                    |      |
| git config user.email "cmchaol@users.noreply.github.com" | # setup user.email                 |      |
|                                                          |                                    |      |
| git config user.name "cmchaol"                           | # setup user.name                  |      |
|                                                          |                                    |      |
|                                                          |                                    |      |

*** column width in org and github 2

| the command                                              | the comment                        |
|                                                          |                                    |
|                                                          |                                    |
| cd hello-world                                           | # move inside the local repository |
|                                                          |                                    |
| git config push.default simple                           | # push.default simple              |
|                                                          |                                    |
| git config credential.helper 'cache --timeout=3600'      | # caching-your-github-password     |
|                                                          |                                    |
| git config user.email "cmchaol@users.noreply.github.com" | # setup user.email                 |
|                                                          |                                    |
| git config user.name "cmchaol"                           | # setup user.name                  |
|                                                          |                                    |
|                                                          |                                    |

*** column width in org and github 3

| the command                                              |
|                                                          |
|                                                          |
| cd hello-world                                           |
|                                                          |
| git config push.default simple                           |
|                                                          |
| git config credential.helper 'cache --timeout=3600'      |
|                                                          |
| git config user.email "cmchaol@users.noreply.github.com" |
|                                                          |
| git config user.name "cmchaol"                           |
|                                                          |
|                                                          |



*** org export toc

   #+OPTIONS: toc:2          (only to two levels in TOC)
   #+OPTIONS: toc:nil        (no default TOC at all)


   #+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no default TOC at all)

*** synonym

|          | reference |
|----------+-----------|
| orgmode  |         1 |
|          |           |
| org mode |         1 |
|          |           |
| org-mode |         3 |
|          |           |
| org      |         2 |
|          |           |
|          |           |


reference

1

http://orgmode.org/


2

http://orgmode.org/manual/Summary.html#Summary


3

http://en.wikipedia.org/wiki/Org-mode


*** org export backends

| 2 ways to modify               |
|--------------------------------|
| C-h v org-export-backends      |
| customize                      |
|--------------------------------|
| M-x customize-group org-export |
| Org Export Backends            |

*** org export Literal examples

http://orgmode.org/manual/Literal-examples.html#Literal-examples

Inside the org file, type:
: #+BEGIN_EXAMPLE
: Some example from a text file.
: #+END_EXAMPLE

To insert the above code, type the 3 keystrokes together: '<' 'e' 'TAB'

http://orgmode.org/manual/Easy-Templates.html#Easy-Templates

#+BEGIN_CENTER 

| type the 3 |
| keystrokes |
| together   |
|------------|
| <          |
| e          |
| TAB        |

#+END_CENTER


For simplicity when using small examples, you can also start the example lines with a colon followed by a space. There may also be additional whitespace before the colon:

     Here is an example
        : Some example from a text file.
#+BEGIN_EXAMPLE
     Here is an example
        : Some example from a text file.
#+END_EXAMPLE


*** 15.2 Easy Templates

http://orgmode.org/manual/Easy-Templates.html#Easy-Templates

s 	#+BEGIN_SRC ... #+END_SRC
e 	#+BEGIN_EXAMPLE ... #+END_EXAMPLE
q 	#+BEGIN_QUOTE ... #+END_QUOTE
v 	#+BEGIN_VERSE ... #+END_VERSE
c 	#+BEGIN_CENTER ... #+END_CENTER
l 	#+BEGIN_LaTeX ... #+END_LaTeX
L 	#+LaTeX:
h 	#+BEGIN_HTML ... #+END_HTML
H 	#+HTML:
a 	#+BEGIN_ASCII ... #+END_ASCII
A 	#+ASCII:
i 	#+INDEX: line
I 	#+INCLUDE: line 



*** org-drawers

   keep information associated with an entry, but you normally don't want to see it. 

|        |                   |           |
| insert | org-insert-drawer | C-c C-x d |
|        |                   |           |

  
http://orgmode.org/manual/Drawers.html#Drawers

*** org property
   :PROPERTIES:
   :EXPORT_FILE_NAME: org-property
   :END:

Properties are key-value pairs. 



http://orgmode.org/manual/Property-syntax.html#Property-syntax



** R

*** installation in gentoo

emerge -s %^R$ 

These days, if you want a regex search, you have to prepend a "%" and the regex search is case sensitive. 

http://forums.gentoo.org/viewtopic-t-129047.html

man emerge

--search (-s)
              Searches  for  matches of the supplied string in the portage tree.  By default emerge uses a case-insensitive simple search, but you can enable a regular expression search by prefixing the search string with %.  For example, emerge --search "%^kde" searches for any package whose name starts with "kde"; emerge --search "%gcc$" searches for any package that ends with "gcc"; emerge --search "office" searches for any package that contains the word "office".  If you want to include the category into the search string, prepend an @: emerge --search "%@^dev-java.*jdk". If you  want  to  search the package descriptions as well, use the --searchdesc action.



 emerge -s %^R$ 
Searching...    
[ Results for search key : ^R$ ]
[ Applications found : 1 ]

dev-lang/R
      Latest version available: 3.0.1
      Latest version installed: 3.0.1
      Size of files: 24,910 kB
      Homepage:      http://www.r-project.org/
      Description:   Language and environment for statistical computing and graphics
      License:       || ( GPL-2 GPL-3 ) LGPL-2.1


*** ESS

 emerge -s %^ess$

[ Results for search key : ^ess$ ]
[ Applications found : 2 ]

  app-emacs/ess
      Latest version available: 13.09
      Latest version installed: 13.09
      Size of files: 3,278 kB
      Homepage:      http://ess.r-project.org/
      Description:   Emacs Speaks Statistics
      License:       GPL-2+ GPL-3+ Texinfo-manual

  app-xemacs/ess
      Latest version available: 1.03
      Latest version installed: [ Not Installed ]
      Size of files: 459 kB
      Homepage:      http://xemacs.org/
      Description:   ESS: Emacs Speaks Statistics
      License:       GPL-2


** i3 (window manager)

*** definition

| i3 |   |
|    |   | 

|          | a monitor                   |
|----------+-----------------------------|
| a screen | a monitor only has a screen |
|          |                             |

|             | a screen                             |
|-------------+--------------------------------------|
| workspace 1 |                                      |
| workspace 2 | a screen presents only one workspace |
| workspace 3 |                                      |


|                       | i3                          |
|-----------------------+-----------------------------|
| a new terminal window |                             |
| a container           |                             |
| a tree                |                             |
| a outputs             |                             |
| a workspace           |                             |
| a screen              | presents only one workspace |
| a monitor             | contains only one screen    |
|                       |                             |


| general                         | i3                   |
|                                 |                      |
|---------------------------------+----------------------|
| a terminal inside a window      | the basic uint in i3 |
|                                 |                      |
| a screen resides on a monitor   |                      |
|                                 |                      |
| a workspace resides on a screen |                      |
|                                 |                      |

*** synonym

|                     |           | reference |
|---------------------+-----------+-----------|
| i3wm                | official  |         1 |
|                     |           |           |
| i3 (window manager) | wikipedia |         2 |
|                     |           |           |
| i3-wm               |           |         3 |
|                     |           |           |
| i3                  |           |         4 |
|                     |           |           |
|                     |           |           |

1

http://i3wm.org/docs/userguide.html


2

http://en.wikipedia.org/wiki/I3_%28window_manager%29



3

https://www.archlinux.org/packages/community/x86_64/i3-wm/


4

https://wiki.archlinux.org/index.php/i3


** The top level headline

*** space

tasks
projects
q



*** scheme

| tasks    |
| projects |
|          |


