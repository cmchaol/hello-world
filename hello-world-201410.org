#+OPTIONS: toc:2          

* i3 (window manager)

** definition

| i3 |   |
|    |   | 

|          | a monitor                   |
|----------+-----------------------------|
| a screen | a monitor only has a screen |
|          |                             |

|             | a screen                             |
|-------------+--------------------------------------|
| workspace 1 |                                      |
| workspace 2 | a screen presents only one workspace |
| workspace 3 |                                      |


|                       | i3                          |
|-----------------------+-----------------------------|
| a new terminal window |                             |
| a container           |                             |
| a tree                |                             |
| a outputs             |                             |
| a workspace           |                             |
| a screen              | presents only one workspace |
| a monitor             | contains only one screen    |
|                       |                             |


| general                         | i3                   |
|                                 |                      |
|---------------------------------+----------------------|
| a terminal inside a window      | the basic uint in i3 |
|                                 |                      |
| a screen resides on a monitor   |                      |
|                                 |                      |
| a workspace resides on a screen |                      |
|                                 |                      |

** synonym

|                     |           | reference |
|---------------------+-----------+-----------|
| i3wm                | official  |         1 |
|                     |           |           |
| i3 (window manager) | wikipedia |         2 |
|                     |           |           |
| i3-wm               |           |         3 |
|                     |           |           |
| i3                  |           |         4 |
|                     |           |           |
|                     |           |           |

1

http://i3wm.org/docs/userguide.html


2

http://en.wikipedia.org/wiki/I3_%28window_manager%29



3

https://www.archlinux.org/packages/community/x86_64/i3-wm/


4

https://wiki.archlinux.org/index.php/i3




* my git experience

** repository download, setup, edit, upload, by git

*** summary

| step | the repsitory | the git command |
|------+---------------+-----------------|
|    1 | download      | git clone       |
|      |               |                 |
|    2 | setup         | git config      |
|      |               |                 |
|    3 | edit          | git add         |
|      |               | git commit      |
|      |               |                 |
|    4 | upload        | git push        |


*** download THIS repository

#+BEGIN_EXAMPLE

git clone https://github.com/cmchaol/hello-world.git

#+END_EXAMPLE

| step |                                  | the command                                          |
|------+----------------------------------+------------------------------------------------------|
|    1 | open a terminal                  |                                                      |
|      |                                  |                                                      |
|    2 | point inside the terminal        |                                                      |
|      |                                  |                                                      |
|    3 | move to the desire directory     |                                                      |
|      |                                  |                                                      |
|    4 | download the respostory          | git clone https://github.com/cmchaol/hello-world.git |


*** setup the local respository

#+BEGIN_EXAMPLE

cd hello-world    

git config user.email "cmchaol@users.noreply.github.com"

git config user.name "cmchaol" 

git config credential.helper 'cache --timeout=3600'

git config push.default simple 

#+END_EXAMPLE

| step |                                  | the command                                              |
|------+----------------------------------+----------------------------------------------------------|
|    1 | move inside the local repository | cd hello-world                                           |
|      |                                  |                                                          |
|    2 | setup user.email                 | git config user.email "cmchaol@users.noreply.github.com" |
|      |                                  |                                                          |
|    3 | setup user.name                  | git config user.name "cmchaol"                           |
|      |                                  |                                                          |
|    4 | caching-your-github-password     | git config credential.helper 'cache --timeout=3600'      |
|      |                                  |                                                          |
|    5 | push.default simple              | git config push.default simple                           |


*** edit the local repository, git add, git commit

| step |                                  | the command               |
|------+----------------------------------+---------------------------|
|    1 | edit the-specific-file           |                           |
|      |                                  |                           |
|    2 | git add the-specific-file        | git add the-specific-file |
|      |                                  |                           |
|    3 | commit the snapshot              | git commit -m "<message>" |


git add

https://www.atlassian.com/git/tutorials/saving-changes/git-add


git commit 

https://www.atlassian.com/git/tutorials/saving-changes/git-commit



*** upload the local snapshot to the remote github repository

| step |                                                     |
|------+-----------------------------------------------------|
|    1 | inside the local repository                         |
|      |                                                     |
|    2 | setup the git config                                |
|      |                                                     |
|      | user.mail                                           |
|      | git config user.email "you@example.com"             |
|      |                                                     |
|      | user.name                                           |
|      | git config user.name "cmchaol"                      |
|      |                                                     |
|      | push.default                                        |
|      | git config push.default simple                      |
|      |                                                     |
|      | caching password                                    |
|      | git config credential.helper 'cache --timeout=3600' |
|      |                                                     |
|      |                                                     |
|    3 | git push                                            |
|      |                                                     |


step 2

#+BEGIN_EXAMPLE

git config user.email "you@example.com" 

git config user.name "cmchaol"          

git config push.default simple

git config          credential.helper 'cache --timeout=3600'

#+END_EXAMPLE


step 3

git push 

https://www.atlassian.com/git/tutorials/syncing/git-push


*** a typical script

| A practicle cycle |
|-------------------|
| git clone         |
| edit              |
| git add           |
| git commit        |
| git push          |

#+BEGIN_EXAMPLE

git add hello-world-201410.org

git commit -m "<another modification of hello-world-201410.org>"

git push

#+END_EXAMPLE



** Caching your GitHub password in Git

By default, Git will cache your password for 15 minutes.

https://help.github.com/articles/caching-your-github-password-in-git

#+BEGIN_EXAMPLE

git config          credential.helper  cache

git config --global credential.helper  cache

git config --global credential.helper 'cache --timeout=3600'

git config          credential.helper 'cache --timeout=3600'

#+END_EXAMPLE



* org mode

** synonym

|          | reference |
|----------+-----------|
| orgmode  |         1 |
|          |           |
| org mode |         1 |
|          |           |
| org-mode |         3 |
|          |           |
| org      |         2 |
|          |           |
|          |           |


reference

1

http://orgmode.org/


2

http://orgmode.org/manual/Summary.html#Summary


3

http://en.wikipedia.org/wiki/Org-mode


** org export backends

c-h v org-export-backends


** org export Literal examples

http://orgmode.org/manual/Literal-examples.html#Literal-examples

: Inside the org file, type:
:
: #+BEGIN_EXAMPLE
: Some example from a text file.
: #+END_EXAMPLE

For simplicity when using small examples, you can also start the example lines with a colon followed by a space. There may also be additional whitespace before the colon:

     Here is an example
        : Some example from a text file.
#+BEGIN_EXAMPLE
     Here is an example
        : Some example from a text file.
#+END_EXAMPLE



* R

** installation in gentoo

emerge -s %^R$ 

These days, if you want a regex search, you have to prepend a "%" and the regex search is case sensitive. 

http://forums.gentoo.org/viewtopic-t-129047.html

man emerge

--search (-s)
              Searches  for  matches of the supplied string in the portage tree.  By default emerge uses a case-insensitive simple search, but you can enable a regular expression search by prefixing the search string with %.  For example, emerge --search "%^kde" searches for any package whose name starts with "kde"; emerge --search "%gcc$" searches for any package that ends with "gcc"; emerge --search "office" searches for any package that contains the word "office".  If you want to include the category into the search string, prepend an @: emerge --search "%@^dev-java.*jdk". If you  want  to  search the package descriptions as well, use the --searchdesc action.



 emerge -s %^R$ 
Searching...    
[ Results for search key : ^R$ ]
[ Applications found : 1 ]

dev-lang/R
      Latest version available: 3.0.1
      Latest version installed: 3.0.1
      Size of files: 24,910 kB
      Homepage:      http://www.r-project.org/
      Description:   Language and environment for statistical computing and graphics
      License:       || ( GPL-2 GPL-3 ) LGPL-2.1


** ESS

 emerge -s %^ess$

[ Results for search key : ^ess$ ]
[ Applications found : 2 ]

  app-emacs/ess
      Latest version available: 13.09
      Latest version installed: 13.09
      Size of files: 3,278 kB
      Homepage:      http://ess.r-project.org/
      Description:   Emacs Speaks Statistics
      License:       GPL-2+ GPL-3+ Texinfo-manual

  app-xemacs/ess
      Latest version available: 1.03
      Latest version installed: [ Not Installed ]
      Size of files: 459 kB
      Homepage:      http://xemacs.org/
      Description:   ESS: Emacs Speaks Statistics
      License:       GPL-2

